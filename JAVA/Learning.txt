Instance initializer block :
		- It is used to intilize the instance data member.
		- It run when each time object called.
		- Whon invoked first ?
				- extend constructor(parent constructor)
				- initializer block
				- child constructor
				  eg. {int z=0;} 
				  
final keyword :
		- You can not change value.
		- used for restrict the user.
		- It can be initilized in constructor only.
		- blank final sttic variable initilized in sttic block only.
		- we can not declare constructor final because it never inherited
		- final keyword use
				- variable 
					- you can not change value
					- you can initilized blank varaiable in constructor
				- method 
					- You can not override that method---if you do give compile error
					- You can inherit it but can not override it.
				- class 
					- You can not extend it
					
Runtime Polymorphism with Data Member :
		- A method is overridden, not the data members, so runtime polymorphism 
		  can't be achieved by data members.
		- eg. 
			class Bike{  
			int speedlimit=90;  
			}  
			class Honda3 extends Bike{ 
			int speedlimit=150;  
			public static void main(String args[])
			{  
			Bike obj=new Honda3();  
			System.out.println(obj.speedlimit);//90  
			}  
			}
			output : 90

Static Binding and Dynamic Binding
	- When type of the object is determined at compiled time(by the compiler),
   	  it is known as static binding.
	- If there is any private, final or static method in a class, there is static binding.
		- eg.
				class Dog{  
					private void eat(){System.out.println("dog is eating...");
					}  
					public static void main(String args[]){  
					Dog d1=new Dog();  
					d1.eat();  
					}  
				}  
	- When type of the object is determined at run-time, it is known as dynamic binding.
		- eg.
			class Animal{  
				void eat(){System.out.println("animal is eating...");}  
						}  
  
			class Dog extends Animal{  
				void eat(){System.out.println("dog is eating...");}  
  
				public static void main(String args[]){  
					Animal a=new Dog();  
					a.eat();  
				}  
			}  
		- type cannot be determined by the compiler, because the instance of Dog is 
		  also an instance of Animal.So compiler doesn't know its type,
		  only its base type.
		  
Abstract class
		- It can have abstract method or non-abstract method.
		- a class which is declared with abstract keyword.
		- abstraction achievment way
				- Abstract class (0-100%)
				- Interface(100%)
						
						- An abstract class must be declared with an abstract keyword.
						- It can have abstract and non-abstract methods.
						- It cannot be instantiated.
						- It can have constructors and static methods also.
						- It can have final methods which will force the subclass not to change the body of the method.
		- If there is an abstract method in a class, that class must be abstract.
		
Interface in Java
		- An interface in Java is a blueprint of a class.
		- It has static constants and abstract methods.
		- In used.
				- It is used to achieve abstraction.
				- By interface, we can support the functionality of multiple inheritance.
				- It can be used to achieve loose coupling.
				
String class
		- An array of characters works same as Java string.
		- The java.lang.String class implements Serializable, Comparable and 
		  CharSequence interfaces.
		- Way to create String object
				- By string literal
				- By new keyword
		- Note : Each time you create a string literal, the JVM checks the "string 
		         constant pool" first. If the string already exists in the pool, a
				 reference to the pooled instance is returned. If the string doesn't 
				 exist in the pool, a new string instance is created and placed in the pool. 
		
