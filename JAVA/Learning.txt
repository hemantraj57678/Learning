Instance initializer block :
		- It is used to intilize the instance data member.
		- It run when each time object called.
		- Whon invoked first ?
				- extend constructor(parent constructor)
				- initializer block
				- child constructor
				  eg. {int z=0;} 
				  
final keyword :
		- You can not change value.
		- used for restrict the user.
		- It can be initilized in constructor only.
		- blank final sttic variable initilized in sttic block only.
		- we can not declare constructor final because it never inherited
		- final keyword use
				- variable 
					- you can not change value
					- you can initilized blank varaiable in constructor
				- method 
					- You can not override that method---if you do give compile error
					- You can inherit it but can not override it.
				- class 
					- You can not extend it
					
Runtime Polymorphism with Data Member :
		- A method is overridden, not the data members, so runtime polymorphism 
		  can't be achieved by data members.
		- eg. 
			class Bike{  
			int speedlimit=90;  
			}  
			class Honda3 extends Bike{ 
			int speedlimit=150;  
			public static void main(String args[])
			{  
			Bike obj=new Honda3();  
			System.out.println(obj.speedlimit);//90  
			}  
			}
			output : 90

Static Binding and Dynamic Binding
	- When type of the object is determined at compiled time(by the compiler),
   	  it is known as static binding.
	- If there is any private, final or static method in a class, there is static binding.
		- eg.
				class Dog{  
					private void eat(){System.out.println("dog is eating...");
					}  
					public static void main(String args[]){  
					Dog d1=new Dog();  
					d1.eat();  
					}  
				}  
	- When type of the object is determined at run-time, it is known as dynamic binding.
		- eg.
			class Animal{  
				void eat(){System.out.println("animal is eating...");}  
						}  
  
			class Dog extends Animal{  
				void eat(){System.out.println("dog is eating...");}  
  
				public static void main(String args[]){  
					Animal a=new Dog();  
					a.eat();  
				}  
			}  
		- type cannot be determined by the compiler, because the instance of Dog is 
		  also an instance of Animal.So compiler doesn't know its type,
		  only its base type.
		  
Abstract class
		- It can have abstract method or non-abstract method.
		- a class which is declared with abstract keyword.
		- abstraction achievment way
				- Abstract class (0-100%)
				- Interface(100%)
						
						- An abstract class must be declared with an abstract keyword.
						- It can have abstract and non-abstract methods.
						- It cannot be instantiated.
						- It can have constructors and static methods also.
						- It can have final methods which will force the subclass not to change the body of the method.
		- If there is an abstract method in a class, that class must be abstract.
		
Interface in Java
		- An interface in Java is a blueprint of a class.
		- It has static constants and abstract methods.
		- In used.
				- It is used to achieve abstraction.
				- By interface, we can support the functionality of multiple inheritance.
				- It can be used to achieve loose coupling.
				
String class
		- An array of characters works same as Java string.
		- The java.lang.String class implements Serializable, Comparable and 
		  CharSequence interfaces.
		- Way to create String object
				- By string literal
				- By new keyword
		- Note : Each time you create a string literal, the JVM checks the "string 
		         constant pool" first. If the string already exists in the pool, a
				 reference to the pooled instance is returned. If the string doesn't 
				 exist in the pool, a new string instance is created and placed in the pool. 
		
Exception Handling:
		- To handle run time error
		- Throwable
			-Exception
				-IOExceprtion
				-SQLException
				-Classnot found Exception
				-Runtime Exception
					-Arthimatic Exception
					-NullPointerException
					-NumberFormatException
					-IndexoutOfBound Exception
			-Error
				-Stack overflow error
				-Virtual Machine error
				-OutOfMemory error
				
Try- Catch
		- The catch block must be used after the try block only. 
		  You can use multiple catch block with a single try block.
		- 
		
		
Wrapper Class 
		- Wrapper class provides mechanism to convert primitive in to object and
 		  object to primitive.
		- autoboxing and unboxing convert
		- Java oop language so we need to deal with object like collections, serialization 
		  and synchronization.
		- The java.util package provides the utility classes to deal with object.
		- The automatic conversion of primitive data type into its corresponding wrapper 
		  class is known as autoboxing,
		- The automatic conversion of wrapper type into its corresponding primitive type
  		  is known as unboxing.
		- eg. int i=a.intValue();
		
Collections in Java
		- The Collection in Java is a framework that provides an architecture to store 
		  and manipulate the group of objects.
		- Java Collection means a single unit of objects.
		
		Iterable Interface:
			- The Iterable interface is the root interface for all the collection classes. 
			- It contains only one abstract method.
			- eg. Iterator<T> iterator()  
			
		Collection Interface:
			- 
			
		List Interface :
			- List interface is implemented by the classes ArrayList, LinkedList, Vector, and Stack.
			- It can have duplicate values.
			
ArrayList:
		- dynamic array to store the elements.
		- there is no size limit.
		- ArrayList in java can duplicate elements.
		- ArrayList class maintain insertion order.
		- ArrayList class is nonsynchronized.
		- Method:
			-list.add(); -It will add
			-list.get(i) -data from list
			-list.set(1,"XYZ"); -it wil replace
			-Collections.sort(list1);  -for sorting
			-list.addAll(list1); -add list1  all data to list.
			-list.remove("XYZ") -remove first XYZ data from list
			-list.remove(0) -remove index 0 data from list
			-list.removeAll(list1) -remove all data
			-list.clear() -clear all list
			-list.retainAll(list1); -compare with list1 and list , and outwill common data
			-list.isEmpty() -if empty return True
			-Size is dependent on how much data
			-Capacity is dependent on how much define
			
LinkedList :
		- Java LinkedList class uses a doubly linked list to store the elements.
		- It inherits the AbstractList class and implements List and Deque interfaces.
		- Java LinkedList class is non synchronized.
		- Java LinkedList class maintains insertion order.
		- Java LinkedList class can contain duplicate elements.


